# this is the sensor / template definition for the ePaper Weather and Calendar

epaper_weather_and_calendar:
  template:
    # Bundle up all the data to send over to ePaper Weather and Calendar (ESPHome device).
    - triggers:
        - platform: state
          entity_id: weather.openweathermap # this name must match your integration
        - trigger: time_pattern
          minutes: "/15"
      action:
        # get forecasts from OpenWeathermap
        - action: weather.get_forecasts
          data:
            type: hourly
          target:
            entity_id: weather.openweathermap
          response_variable: hourly
        # Get the calendar data
        - service: calendar.get_events
          data:
            duration:
              # How many days into the future entries should be fetched
              days: 14
          target:
            entity_id:
              # Add your calendar entity id's here
              - calendar.werner
              - calendar.all
              - calendar.holidays
          response_variable: calendar_response
        # Convert the received data into our custom format that the ESPHome firmware expects via a python script
        - service: python_script.epaper_calendar_conversion
          data:
            calendar: "{{ calendar_responseÂ }}"
            now: "{{ now().date() }}"
          response_variable: calendar_converted
      sensor:
        - name: ePaper Weather Data
          state: "{{ now().isoformat() }}" # write timestamp of last update into state
          attributes:
            weather_condition_now: >
              {% set cond_now = states('weather.openweathermap') %}
              {% if states('sun.sun') == 'below_horizon' %}
                  {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
              {% else %}
                  {{ cond_now }}
              {% endif %}

            temperature: >
              {{ state_attr('weather.openweathermap', 'temperature') | round }}

            weather_condition_0: >
              {% set cond0 = hourly['weather.openweathermap'].forecast[2].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond0_time = as_timestamp(hourly['weather.openweathermap'].forecast[2].datetime) %}
              {% if cond0_time < next_rising and next_rising < next_setting %}
                  {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
              {% else %}
                  {{ cond0 }}
              {% endif %}
            weather_temperature_0: >
              {{ hourly['weather.openweathermap'].forecast[2].temperature | round }}
            weather_timestamp_0: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[2].datetime) | timestamp_custom('%H:%M') }}

            weather_condition_1: >
              {% set cond1 = hourly['weather.openweathermap'].forecast[4].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond1_time = as_timestamp(hourly['weather.openweathermap'].forecast[4].datetime) %}
              {% if cond1_time < next_rising and next_rising < next_setting %}
                  {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
              {% else %}
                  {{ cond1 }}
              {% endif %}
            weather_temperature_1: >
              {{ hourly['weather.openweathermap'].forecast[4].temperature | round }}
            weather_timestamp_1: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[4].datetime) | timestamp_custom('%H:%M') }}

            weather_condition_2: >
              {% set cond2 = hourly['weather.openweathermap'].forecast[6].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond2_time = as_timestamp(hourly['weather.openweathermap'].forecast[6].datetime) %}
              {% if cond2_time < next_rising and next_rising < next_setting %}
                  {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
              {% else %}
                  {{ cond2 }}
              {% endif %}
            weather_temperature_2: >
              {{ hourly['weather.openweathermap'].forecast[6].temperature | round }}
            weather_timestamp_2: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[6].datetime) | timestamp_custom('%H:%M') }}

            weather_condition_3: >
              {% set cond3 = hourly['weather.openweathermap'].forecast[8].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond3_time = as_timestamp(hourly['weather.openweathermap'].forecast[8].datetime) %}
              {% if cond3_time < next_rising and next_rising < next_setting %}
                  {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
              {% else %}
                  {{ cond3 }}
              {% endif %}
            weather_temperature_3: >
              {{ hourly['weather.openweathermap'].forecast[8].temperature | round }}
            weather_timestamp_3: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[8].datetime) | timestamp_custom('%H:%M') }}

        - name: ePaper Weather And Calendar Data
          state: "{{ now().isoformat() }}" # write timestamp of last update into state
          attributes:
            weather_condition_now: >
              {% set cond_now = states('weather.openweathermap') %}
              {% if states('sun.sun') == 'below_horizon' %}
                  {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
              {% else %}
                  {{ cond_now }}
              {% endif %}

            temperature: >
              {{ state_attr('weather.openweathermap', 'temperature') | round }}

            weather_condition_0: >
              {% set cond0 = hourly['weather.openweathermap'].forecast[2].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond0_time = as_timestamp(hourly['weather.openweathermap'].forecast[2].datetime) %}
              {% if cond0_time < next_rising and next_rising < next_setting %}
                  {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
              {% else %}
                  {{ cond0 }}
              {% endif %}
            weather_temperature_0: >
              {{ hourly['weather.openweathermap'].forecast[2].temperature | round }}
            weather_timestamp_0: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[2].datetime) | timestamp_custom('%H:%M') }}

            weather_condition_1: >
              {% set cond1 = hourly['weather.openweathermap'].forecast[4].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond1_time = as_timestamp(hourly['weather.openweathermap'].forecast[4].datetime) %}
              {% if cond1_time < next_rising and next_rising < next_setting %}
                  {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
              {% else %}
                  {{ cond1 }}
              {% endif %}
            weather_temperature_1: >
              {{ hourly['weather.openweathermap'].forecast[4].temperature | round }}
            weather_timestamp_1: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[4].datetime) | timestamp_custom('%H:%M') }}

            weather_condition_2: >
              {% set cond2 = hourly['weather.openweathermap'].forecast[6].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond2_time = as_timestamp(hourly['weather.openweathermap'].forecast[6].datetime) %}
              {% if cond2_time < next_rising and next_rising < next_setting %}
                  {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
              {% else %}
                  {{ cond2 }}
              {% endif %}
            weather_temperature_2: >
              {{ hourly['weather.openweathermap'].forecast[6].temperature | round }}
            weather_timestamp_2: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[6].datetime) | timestamp_custom('%H:%M') }}

            weather_condition_3: >
              {% set cond3 = hourly['weather.openweathermap'].forecast[8].condition %}
              {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
              {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
              {% set cond3_time = as_timestamp(hourly['weather.openweathermap'].forecast[8].datetime) %}
              {% if cond3_time < next_rising and next_rising < next_setting %}
                  {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
              {% else %}
                  {{ cond3 }}
              {% endif %}
            weather_temperature_3: >
              {{ hourly['weather.openweathermap'].forecast[8].temperature | round }}
            weather_timestamp_3: >
              {{ as_timestamp(hourly['weather.openweathermap'].forecast[8].datetime) | timestamp_custom('%H:%M') }}

            # calendar data
            calendar_closest_end_time: "{{ as_timestamp(calendar_converted.closest_end_time, default=0) }}"
            calendar_entries: "{{ calendar_converted.entries }}"

    # Sensor that contains the json calendar data that ESPHome then parses to display the events
    - binary_sensor:
        - name: ePaper Weather and Calendar Update During Deep Sleep
          state: >
            {{  (states.sensor.epaper_weather_and_calendar_data.last_updated > states.sensor.epaper_weather_and_calendar_last_display_update.last_updated) }}

  # disable deep sleep to be able to send OTA update to ESPhome devices
  input_boolean:
    disable_deep_sleep:
      name: Disable Deep Sleep
      icon: mdi:sleep-off
